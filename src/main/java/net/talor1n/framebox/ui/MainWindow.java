package net.talor1n.framebox.ui;

import lombok.extern.log4j.Log4j2;
import net.talor1n.framebox.repository.UserRepository;
import net.talor1n.framebox.util.FFmpegRecorder;
import org.bytedeco.opencv.opencv_core.Mat;
import org.bytedeco.opencv.opencv_videoio.VideoCapture;
import org.bytedeco.opencv.global.opencv_videoio;
import org.bytedeco.opencv.global.opencv_imgproc;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

@Log4j2
public class MainWindow {

    private final JLabel cameraScreen;
    private final JComboBox<String> cameraList;
    private final JButton recordButton;
    private final JButton stopRecordButton;

    private final ExecutorService executor = Executors.newSingleThreadExecutor(r -> {
        Thread t = new Thread(r, "Camera-Thread");
        t.setDaemon(true);
        return t;
    });
    private final UserRepository repo;
    private final Long userID;

    private volatile boolean running;
    private volatile boolean recording;
    private volatile int selectedCamera;
    private Future<?> cameraTask;

    private FFmpegRecorder recorder;
    private final int recordingWidth = 1280;
    private final int recordingHeight = 720;

    public MainWindow(UserRepository repo, Long userID) {
        this.repo = repo;
        this.userID = userID;

        var frame = new JFrame("–í–µ–±-–∫–∞–º–µ—Ä–∞ ‚Äî –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setMinimumSize(new Dimension(800, 600));
        frame.setLocationRelativeTo(null);

        cameraScreen = new JLabel("–û–∂–∏–¥–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã...", SwingConstants.CENTER);
        cameraScreen.setPreferredSize(new Dimension(640, 480));

        // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        JPanel controlPanel = new JPanel();

        cameraList = new JComboBox<>();
        populateCameraList();
        cameraList.addActionListener(e -> switchCamera(cameraList.getSelectedIndex()));
        controlPanel.add(new JLabel("–í—ã–±–æ—Ä –∫–∞–º–µ—Ä—ã:"));
        controlPanel.add(cameraList);

        // –ö–Ω–æ–ø–∫–∏ –∑–∞–ø–∏—Å–∏
        recordButton = new JButton("–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å");
        stopRecordButton = new JButton("–°—Ç–æ–ø –∑–∞–ø–∏—Å—å");
        stopRecordButton.setEnabled(false);

        recordButton.addActionListener(e -> startRecording());
        stopRecordButton.addActionListener(e -> stopRecording());

        controlPanel.add(recordButton);
        controlPanel.add(stopRecordButton);

        frame.setLayout(new BorderLayout());
        frame.add(controlPanel, BorderLayout.NORTH);
        frame.add(cameraScreen, BorderLayout.CENTER);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        frame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                stopRecording();
                stopCamera();
                executor.shutdown();
            }
        });

        frame.setVisible(true);

        log.info("–û–∫–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, —Å—Ç–∞—Ä—Ç—É–µ–º –ø–µ—Ä–≤—É—é –∫–∞–º–µ—Ä—É...");
        if (cameraList.getItemCount() > 0) {
            switchCamera(0);
        }
    }

    private void populateCameraList() {
        log.info("–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä...");
        for (int i = 0; i < 5; i++) {
            VideoCapture cap = new VideoCapture(i);
            try {
                if (cap.isOpened()) {
                    cameraList.addItem("–ö–∞–º–µ—Ä–∞ " + i);
                    log.info("–ù–∞–π–¥–µ–Ω–∞ –∫–∞–º–µ—Ä–∞ {}", i);
                }
            } finally {
                cap.release();
            }
        }
        if (cameraList.getItemCount() == 0) {
            log.warn("–ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
            cameraList.addItem("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä");
        }
    }

    private void switchCamera(int index) {
        log.info("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É {}", index);
        stopRecording();
        stopCamera();
        selectedCamera = index;
        running = true;
        cameraTask = executor.submit(this::startCameraLoop);
    }

    private void startCameraLoop() {
        log.info("–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã {}", selectedCamera);
        VideoCapture capture = null;
        Mat frameMat = null;
        Mat resizedMat = null;

        try {
            capture = new VideoCapture(selectedCamera);
            if (!capture.isOpened()) {
                log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É {}", selectedCamera);
                SwingUtilities.invokeLater(() ->
                        JOptionPane.showMessageDialog(null,
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É: " + selectedCamera,
                                "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE));
                return;
            }

            double fps = capture.get(opencv_videoio.CAP_PROP_FPS);
            if (fps <= 0) fps = 30.0;

            int width = (int) capture.get(opencv_videoio.CAP_PROP_FRAME_WIDTH);
            int height = (int) capture.get(opencv_videoio.CAP_PROP_FRAME_HEIGHT);

            long frameDelay = (long) (1000 / fps);
            log.info("FPS –∫–∞–º–µ—Ä—ã {}: {}, —Ä–∞–∑–º–µ—Ä: {}x{}", selectedCamera, fps, width, height);

            frameMat = new Mat();
            resizedMat = new Mat();

            while (running && !Thread.currentThread().isInterrupted()) {
                long start = System.nanoTime();

                if (capture.read(frameMat) && !frameMat.empty()) {
                    // üîπ –∑–∞–ø–∏—Å—å
                    if (recording && recorder != null) {
                        opencv_imgproc.resize(frameMat, resizedMat,
                                new org.bytedeco.opencv.opencv_core.Size(recordingWidth, recordingHeight));
                        recorder.record(resizedMat);
                    }

                    // üîπ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                    Mat displayMat = frameMat;
                    if (frameMat.cols() > 800 || frameMat.rows() > 600) {
                        opencv_imgproc.resize(frameMat, resizedMat,
                                new org.bytedeco.opencv.opencv_core.Size(640, 480));
                        displayMat = resizedMat;
                    }

                    BufferedImage img = matToBufferedImage(displayMat);
                    if (img != null) {
                        BufferedImage finalImg = img;
                        SwingUtilities.invokeLater(() -> {
                            cameraScreen.setText(null); // —É–±–∏—Ä–∞–µ–º "–û–∂–∏–¥–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã..."
                            cameraScreen.setIcon(new ImageIcon(finalImg));
                        });
                    }
                }

                long elapsed = (System.nanoTime() - start) / 1_000_000;
                long sleepTime = frameDelay - elapsed;
                if (sleepTime > 0) {
                    try {
                        Thread.sleep(sleepTime);
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                        break;
                    }
                }
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∫–∞–º–µ—Ä—ã", e);
        } finally {
            if (frameMat != null) frameMat.release();
            if (resizedMat != null) resizedMat.release();
            if (capture != null) capture.release();

            if (recording && recorder != null) {
                try {
                    recorder.stop();
                } catch (Exception e) {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏", e);
                }
                recorder = null;
                recording = false;
                SwingUtilities.invokeLater(() -> {
                    recordButton.setEnabled(true);
                    stopRecordButton.setEnabled(false);
                });
            }

            // üîπ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–¥–ø–∏—Å—å "–û–∂–∏–¥–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã..."
            SwingUtilities.invokeLater(() -> {
                cameraScreen.setIcon(null);
                cameraScreen.setText("–û–∂–∏–¥–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã...");
            });

            log.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã {}", selectedCamera);
        }
    }

    public void stopCamera() {
        running = false;
        if (cameraTask != null) {
            cameraTask.cancel(true);
            cameraTask = null;
        }
    }

    private void startRecording() {
        if (recording) return;

        try {
            String folder = "videos";
            new File(folder).mkdirs();

            String filename = "capture-" + new SimpleDateFormat("yyyyMMdd-HHmmss").format(new Date()) + ".mp4";
            File file = new File(folder, filename);

            String fullPath = file.getAbsolutePath();

            repo.addVideoToUser(userID, fullPath);

            recorder = new FFmpegRecorder();
            recorder.start(fullPath, recordingWidth, recordingHeight, 30);
            recording = true;

            SwingUtilities.invokeLater(() -> {
                recordButton.setEnabled(false);
                stopRecordButton.setEnabled(true);
            });

            log.info("–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –≤ {} (—Ä–∞–∑–º–µ—Ä: {}x{})", fullPath, recordingWidth, recordingHeight);

        } catch (Exception e) {
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", e);
            recording = false;
            if (recorder != null) {
                try {
                    recorder.stop();
                } catch (Exception ex) {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ recorder –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞", ex);
                }
                recorder = null;
            }
            SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null,
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å: " + e.getMessage(),
                            "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏", JOptionPane.ERROR_MESSAGE));
        }
    }

    private void stopRecording() {
        if (!recording) return;

        recording = false;
        if (recorder != null) {
            try {
                recorder.stop();
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏", e);
            }
            recorder = null;
        }

        SwingUtilities.invokeLater(() -> {
            recordButton.setEnabled(true);
            stopRecordButton.setEnabled(false);
        });

        log.info("–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    }

    private static BufferedImage matToBufferedImage(Mat mat) {
        if (mat == null || mat.empty()) {
            return null;
        }

        try {
            int type = mat.channels() == 1
                    ? BufferedImage.TYPE_BYTE_GRAY
                    : BufferedImage.TYPE_3BYTE_BGR;
            BufferedImage image = new BufferedImage(mat.cols(), mat.rows(), type);

            byte[] data = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
            mat.data().get(data);

            return image;
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Mat –≤ BufferedImage: " + e.getMessage());
            return null;
        }
    }
}